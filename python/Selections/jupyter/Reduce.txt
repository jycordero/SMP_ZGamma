import sys
import datetime

from scipy.optimize  import curve_fit, fsolve
from scipy.special   import erf, betainc, gamma

from ROOT import TFile,TMVA,TH2F, TCanvas,TTree
import array
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt 

from root_pandas import read_root

projectdir = "/home/jcordero/CMS/JYCMCMS/SMP_ZG/"
sys.path.append(projectdir+"python")

# My Dependencies
from Config            import Config
from Reader            import Reader
from Samples.Data      import Data
from Plotter.Helper    import Helper
from Plotter.Plotter   import Plotter
from Cuts.Cuts         import Cuts

def dirStructure(figpath,Print = False):
    date = datetime.datetime.now()
    fileName = str(date.year) + str(date.month) + str(date.day) + "/"
    
    try:
        os.mkdir(figpath+fileName)    
    except:
        if Print:
            print("Directory "+fileName+ " already exist")
        
    try :
        os.mkdir(figpath+fileName+'ShowerShapeMVA/')
    except:
        if Print:
            print("Directory "+fileName+'ShowerShapeMVA/ already exist')
    
    dirSubStructure(figpath + fileName + "Stacked/", Print=Print)
    dirSubStructure(figpath + fileName + "Unstacked/", Print=Print)
    
    dirSubStructure(figpath + fileName + "nJets/", Print=Print)
    for i in range(5):
        dirSubStructure(figpath + fileName + "nJets/Stacked_nJets"+str(i)+"/", Print=Print)
        dirSubStructure(figpath + fileName + "nJets/Unstacked_nJets"+str(i)+"/", Print=Print)
    
    return figpath+fileName  

def dirSubStructure(path,Print):
    try:
        os.mkdir(path)
    except:
        if Print:
            print("Subdirectory for " + path + " already exists or failed.")
    
    try:
        os.mkdir(path+"log")
        os.mkdir(path+"log/Mult")
        os.mkdir(path+"linear")
        os.mkdir(path+"linear/Mult")
    except:
        if Print:
            print("Subdirectory for " + path + " already exists or failed.")

selection = 'mumug'
#selection = 'elelg'
#selection = 'ee'

#era = "2016"
era = "2017"
#era = "2018"

if   era == "2016":
    run = ['B','C','D','E','F','G','H']
    #DataGen = 'rereco'
    DataGen = 'legacy'
    if DataGen == 'legacy':
        #SampleSet = 'MatchZGpaper'
        #SampleSet = 'Rerun'
        SampleSet = 'Correction'
    else:
        SampleSet = 'MatchZGpaper_newAna'
elif era == "2017":
    if selection == "mumug":
        run = ['B','C','D','E','F']
        DataGen = 'rereco'
        #SampleSet = 'V1'
        #SampleSet = 'V2_puWeight'
        #SampleSet = 'V2_puWeight_phID'
        #SampleSet = "V4_phID_isConv"
        #SampleSet = "V4_phID_isConv_MINUIT"
        #SampleSet  = "V5_mediumID"
        #SampleSet  = "V6_lPhoton"
        SampleSet  = "V6_Accept"
        
        LoadVars = [
            'runNumber','evtNumber',
            'nPV','nPU','Rho', 'met',
            'genWeight','eventWeight','puWeight','triggerWeight','photonIDWeight',"photonIsConvWeight",
            'genPhotonFHPFS','genPhotonIPFS',
            'leptonOnePt','leptonOneEta','leptonOnePhi','leptonOneIso','leptonOneCharge',
            'leptonTwoPt','leptonTwoEta','leptonTwoPhi','leptonTwoIso','leptonTwoCharge',
            'photonOnePt','photonOneEta','photonOnePhi',
            'photonOneR9','photonOneMVA','photonOneERes','photonOneSieie',
            'photonOneHoverE','photonOneIneu','photonOneIph','photonOneIch',
            'photonOneSieip','photonOneSipip','photonOneSrr','photonOneE2x2','photonOneE5x5',
            'photonOneScEtaWidth','photonOneScPhiWidth',
            'photonOneScRawE','photonOnePreShowerE','photonOneScBrem',
            'genPhotonPt',
            'vetoDY','genIsoPass',
            'dileptonPt','dileptonEta','dileptonPhi','dileptonM',
            'llgPt','llgEta','llgPhi','llgM',
            'dileptonDEta','dileptonDPhi','dileptonDR',
            'l1PhotonDEta','l1PhotonDPhi','l1PhotonDR','l1PhotonM','l1PhotonPt',
            'l2PhotonDEta','l2PhotonDPhi','l2PhotonDR','l2PhotonM','l2PhotonPt',
            'dileptonPhotonDEta','dileptonPhotonDPhi','dileptonPhotonDR',
            'nMuons','nElectrons','nPhotons','nJets','nBJets',
            'passElectronVeto',
            ]          
    elif selection == "mumu":
        run = ['B','C','D','E','F']
        DataGen = 'rereco'
        #SampleSet = 'V1'
        #SampleSet = 'V2_puWeight'
        SampleSet = 'V2_puWeight_phID'
        
        LoadVars = [
            'runNumber','evtNumber',
            'nPV','nPU','Rho', 'met',
            'genWeight','eventWeight','puWeight','triggerWeight','photonIDWeight',"photonIsConvWeight",
            'genPhotonFHPFS','genPhotonIPFS',
            'leptonOnePt','leptonOneEta','leptonOnePhi','leptonOneIso','leptonOneCharge',
            'leptonTwoPt','leptonTwoEta','leptonTwoPhi','leptonTwoIso','leptonTwoCharge',
            'photonOnePt','photonOneEta','photonOnePhi',
            'photonOneR9','photonOneMVA','photonOneERes','photonOneSieie',
            'photonOneHoverE','photonOneIneu','photonOneIph','photonOneIch',
            'photonOneSieip','photonOneSipip','photonOneSrr','photonOneE2x2','photonOneE5x5',
            'photonOneScEtaWidth','photonOneScPhiWidth',
            'photonOneScRawE','photonOnePreShowerE','photonOneScBrem',
            'genPhotonPt',
            'vetoDY','genIsoPass',
            'dileptonPt','dileptonEta','dileptonPhi','dileptonM',
            'llgPt','llgEta','llgPhi','llgM',
            'dileptonDEta','dileptonDPhi','dileptonDR',
            'l1PhotonDEta','l1PhotonDPhi','l1PhotonDR','l1PhotonM','l1PhotonPt',
            'l2PhotonDEta','l2PhotonDPhi','l2PhotonDR','l2PhotonM','l2PhotonPt',
            'dileptonPhotonDEta','dileptonPhotonDPhi','dileptonPhotonDR',
            'nMuons','nElectrons','nPhotons','nJets','nBJets',
            'passElectronVeto',
            ]        
    elif selection == "ee":
        run = ['B','C','D','E','F']
        #run = ['D']
        DataGen = 'rereco'
        #SampleSet = 'EfficiencyCorrection/files_zee/CorrShower'
        SampleSet = 'EfficiencyCorrection/files_zee/V4_phID_isConv'
        
        LoadVars = [
                    #'runNumber','evtNumber',
                    'nPV',
                    'nPU',

                    #'genWeight',
                    'eventWeight','puWeight',
                    #'triggerWeight','photonIDWeight',
                    'photonOneEta',
                    #'leptonOneCharge','leptonTwoCharge',
                    #'photonOneMVA',
                    #'photonOneERes',

                    ############################# 

                    #'photonOneR9',
                    'photonOneSieie',
                    #'photonOneHoverE',

                    #'photonOneIneu','photonOneIph','photonOneIch',
                    #'photonOneSieip',
                    #'photonOneSipip',
                    #'photonOneSrr',
                    #'photonOneE2x2',
                    #'photonOneE5x5',
                    #'photonOneScEtaWidth',
                    #'photonOneScPhiWidth',
                    #'photonOneScRawE',
                    #'photonOnePhi',
                    #'photonOnePreShowerE',
                    #'photonOneScBrem',
                    #'Rho',
                    ##############################
                    #'genPhotonPt',
                    #'vetoDY',
                    #'genIsoPass',
                    #'passElectronVeto',
                    'ProbeIDPass','ProbeWorstPass',
                    ]
elif era == "2018":
    if selection == "mumug":
        run = ['A','B','C','D']
        DataGen = 'rereco'
        #SampleSet = 'V1_trigBits'
        SampleSet = 'V2_trigBits_pu'
        
        LoadVars = [
            'runNumber','evtNumber',
            'nPV','nPU','Rho', 'met',
            'genWeight','eventWeight','puWeight','triggerWeight','photonIDWeight',"photonIsConvWeight",
            'genPhotonFHPFS','genPhotonIPFS',
            'leptonOnePt','leptonOneEta','leptonOnePhi','leptonOneIso','leptonOneCharge',
            'leptonTwoPt','leptonTwoEta','leptonTwoPhi','leptonTwoIso','leptonTwoCharge',
            'photonOnePt','photonOneEta','photonOnePhi',
            'photonOneR9','photonOneMVA','photonOneERes','photonOneSieie',
            'photonOneHoverE','photonOneIneu','photonOneIph','photonOneIch',
            'photonOneSieip','photonOneSipip','photonOneSrr','photonOneE2x2','photonOneE5x5',
            'photonOneScEtaWidth','photonOneScPhiWidth',
            'photonOneScRawE','photonOnePreShowerE','photonOneScBrem',
            'genPhotonPt',
            'vetoDY','genIsoPass',
            'dileptonPt','dileptonEta','dileptonPhi','dileptonM',
            'llgPt','llgEta','llgPhi','llgM',
            'dileptonDEta','dileptonDPhi','dileptonDR',
            'l1PhotonDEta','l1PhotonDPhi','l1PhotonDR','l1PhotonM','l1PhotonPt',
            'l2PhotonDEta','l2PhotonDPhi','l2PhotonDR','l2PhotonM','l2PhotonPt',
            'dileptonPhotonDEta','dileptonPhotonDPhi','dileptonPhotonDR',
            'nMuons','nElectrons','nPhotons','nJets','nBJets',
            'passElectronVeto',
            ] 
    elif selection == "elelg":
        run = ['A','B','C','D']
        DataGen = 'rereco'
        SampleSet = 'V1_trigBits'
        
        LoadVars = [
            'runNumber','evtNumber',
            'nPV','nPU','Rho', 'met',
            'genWeight','eventWeight','puWeight','triggerWeight','photonIDWeight',"photonIsConvWeight",
            'genPhotonFHPFS','genPhotonIPFS',
            'leptonOnePt','leptonOneEta','leptonOnePhi','leptonOneIso','leptonOneCharge',
            'leptonTwoPt','leptonTwoEta','leptonTwoPhi','leptonTwoIso','leptonTwoCharge',
            'photonOnePt','photonOneEta','photonOnePhi',
            'photonOneR9','photonOneMVA','photonOneERes','photonOneSieie',
            'photonOneHoverE','photonOneIneu','photonOneIph','photonOneIch',
            'photonOneSieip','photonOneSipip','photonOneSrr','photonOneE2x2','photonOneE5x5',
            'photonOneScEtaWidth','photonOneScPhiWidth',
            'photonOneScRawE','photonOnePreShowerE','photonOneScBrem',
            'genPhotonPt',
            'vetoDY','genIsoPass',
            'dileptonPt','dileptonEta','dileptonPhi','dileptonM',
            'llgPt','llgEta','llgPhi','llgM',
            'dileptonDEta','dileptonDPhi','dileptonDR',
            'l1PhotonDEta','l1PhotonDPhi','l1PhotonDR','l1PhotonM','l1PhotonPt',
            'l2PhotonDEta','l2PhotonDPhi','l2PhotonDR','l2PhotonM','l2PhotonPt',
            'dileptonPhotonDEta','dileptonPhotonDPhi','dileptonPhotonDR',
            'nMuons','nElectrons','nPhotons','nJets','nBJets',
            'passElectronVeto',
            ]          
    elif selection == "mumu":
        run = ['A','B','C','D']
        DataGen = 'rereco'
        SampleSet = 'V1_trigBits'
        
        LoadVars = [
            'runNumber','evtNumber',
            'nPV','nPU','Rho', 'met',
            'genWeight','eventWeight','puWeight','triggerWeight','photonIDWeight',"photonIsConvWeight",
            'genPhotonFHPFS','genPhotonIPFS',
            'leptonOnePt','leptonOneEta','leptonOnePhi','leptonOneIso','leptonOneCharge',
            'leptonTwoPt','leptonTwoEta','leptonTwoPhi','leptonTwoIso','leptonTwoCharge',
            'photonOnePt','photonOneEta','photonOnePhi',
            'photonOneR9','photonOneMVA','photonOneERes','photonOneSieie',
            'photonOneHoverE','photonOneIneu','photonOneIph','photonOneIch',
            'photonOneSieip','photonOneSipip','photonOneSrr','photonOneE2x2','photonOneE5x5',
            'photonOneScEtaWidth','photonOneScPhiWidth',
            'photonOneScRawE','photonOnePreShowerE','photonOneScBrem',
            'genPhotonPt',
            'vetoDY','genIsoPass',
            'dileptonPt','dileptonEta','dileptonPhi','dileptonM',
            'llgPt','llgEta','llgPhi','llgM',
            'dileptonDEta','dileptonDPhi','dileptonDR',
            'l1PhotonDEta','l1PhotonDPhi','l1PhotonDR','l1PhotonM','l1PhotonPt',
            'l2PhotonDEta','l2PhotonDPhi','l2PhotonDR','l2PhotonM','l2PhotonPt',
            'dileptonPhotonDEta','dileptonPhotonDPhi','dileptonPhotonDR',
            'nMuons','nElectrons','nPhotons','nJets','nBJets',
            'passElectronVeto',
            ]        
    elif selection == "ee":
        run = ['A','B','C','D']
        DataGen = 'rereco'
        #SampleSet = 'V1_trigBits'
        #SampleSet = 'EfficiencyCorrection/files_zee/CorrShower'
        SampleSet = 'EfficiencyCorrection/files_zee/V4_phID_isConv'
        
        LoadVars = [
                    #'runNumber','evtNumber',
                    'nPV',
                    'nPU',

                    #'genWeight',
                    'eventWeight','puWeight',
                    #'triggerWeight','photonIDWeight',
                    'photonOneEta',
                    #'leptonOneCharge','leptonTwoCharge',
                    #'photonOneMVA',
                    #'photonOneERes',

                    ############################# 

                    #'photonOneR9',
                    'photonOneSieie',
                    #'photonOneHoverE',

                    #'photonOneIneu','photonOneIph','photonOneIch',
                    #'photonOneSieip',
                    #'photonOneSipip',
                    #'photonOneSrr',
                    #'photonOneE2x2',
                    #'photonOneE5x5',
                    #'photonOneScEtaWidth',
                    #'photonOneScPhiWidth',
                    #'photonOneScRawE',
                    #'photonOnePhi',
                    #'photonOnePreShowerE',
                    #'photonOneScBrem',
                    #'Rho',
                    ##############################
                    #'genPhotonPt',
                    #'vetoDY',
                    #'genIsoPass',
                    #'passElectronVeto',
                    'ProbeIDPass','ProbeWorstPass',
                    ] 
    
pathMVA = "/home/jcordero/CMS/data_"+era+"/"+DataGen+"/SMP_ZG/Files/ShowerShapeMVA/"
path    = "/home/jcordero/CMS/data_"+era+"/"+DataGen+"/SMP_ZG/Files/"+selection+"/"+SampleSet+"/"
figpath = "/home/jcordero/CMS/JYCMCMS/SMP_ZG/figs/"+era+"/"+DataGen+"/"+selection+"/"
pathSelections = "/home/jcordero/CMS/data_"+era+"/"+DataGen+"/SMP_ZG/Files/"+selection+"/"+SampleSet+"/Reduced"

figpath = dirStructure(figpath)   


Help    = Helper(era)
Help.SetPath(path)
Help.figpath = figpath

Plotter = Plotter()
Plotter.SetFig(Help.figpath)

Cut     = Cuts(path = Help.path)


config = Config(
                projectdir = projectdir,
                path       = path,
                era        = era,
                DataGen    = DataGen,
                run        = run,
                selection  = selection,
                LoadVars   = LoadVars,
                )


Read = Reader(config)

data = Read.read()

################################
#stacked = False
stacked = True

LOG = 'both'
log = False
#log = True

#phType = 'ISR'
#phType = 'FSR'
phType = ''


ShowerShapeCorrection = True
#ShowerShapeCorrection = False

if selection == "mumug" or selection == "elelg":
    lgmDR = True
elif selection == "ee":
    lgmDR = False

################

#Region = ''

#Region = 'A'
#Region = 'B'
#Region = 'C'
#Region = 'D'

#Region = 'Ap'
#Region = 'Bp'
#Region = 'Cp'
Region = 'Dp'


#Region = 'AB'
#Region = 'CD'

#Region = 'Sig'
#Region = 'Inv Sig'

#Region = 'Sideband'
#Region = 'Compare'


#Region = ['Sig','IPFS']
#Region = ['Sig','noIPFS']
#Region = ['Inv Sig','IPFS']
#Region = ['Inv Sig','noIPFS']

################

#Charge = 'oposite'
#Charge = 'same'
Charge = ''

#customRange = True
customRange = False

weightCorrection = True
#weightCorrection = False

#StatInclude = False
StatInclude = True

MVA = False
#MVA = True

Print = False
#Print = True

vetoDY = True
#vetoDY = False

###############################
if stacked:
    Fol  = 'Stacked'
    stackLab  = ''
    histtype  = 'stepfilled'
    density   = False
    linewidth = 1
else:
    Fol  = 'Unstacked'
    stackLab  = ''
    histtype  = 'step'
    density   = True
    #density = False
    linewidth = 1.7
###############################    
if log:
    stackFol = Fol+'/log'
else:
    stackFol = Fol+'/linear'
###############################

######## CUTS ##############
Cut.PhaseSpace(
                data,
                phType = phType,
                Charge = Charge,
                Region = Region,
                Print  = Print,
                vetoDY = vetoDY,
                lgmDR  = lgmDR,
                MVA    = MVA,
              )

for d in data[:-1]:
    if not d.df.empty:
        d.AddCuts(np.array(d.df.nPU) > 0) 
        
#for d in data[:-1]:
#    if not d.df.empty:
#        d.AddCuts(np.array(d.df.photonOnePt) > 100)
###############################

from Corrections.ShowerShape import ShowerShape

SS = ShowerShape(config)
SS.loadToGraph()

varName     = {"EE":{
                    "recoPhi"                :["photonOnePhi"],
                    "r9"                     :["photonOneR9"],
                    "sieieFull5x5"           :["photonOneSieie"],
                    "sieipFull5x5"           :["photonOneSieip"],
                    "e2x2Full5x5/e5x5Full5x5":["photonOneE2x2","photonOneE5x5"],
                    "recoSCEta"              :["photonOneEta"],
                    "rawE"                   :["photonOneScRawE"],
                    "scEtaWidth"             :["photonOneScEtaWidth"],
                    "scPhiWidth"             :["photonOneScPhiWidth"],
                    "esEn/rawE"              :["photonOnePreShowerE","photonOneScRawE"],
                    "esRR"                   :["photonOneSrr"],
                    "rho"                    :["Rho"],
                    },
                  "EB":{
                    "recoPhi"                :["photonOnePhi"],
                    "r9"                     :["photonOneR9"],
                    "sieieFull5x5"           :["photonOneSieie"],
                    "sieipFull5x5"           :["photonOneSieip"],
                    "e2x2Full5x5/e5x5Full5x5":["photonOneE2x2","photonOneE5x5"],
                    "recoSCEta"              :["photonOneEta"],
                    "rawE"                   :["photonOneScRawE"],
                    "scEtaWidth"             :["photonOneScEtaWidth"],
                    "scPhiWidth"             :["photonOneScPhiWidth"],
                    "rho"                    :["Rho"],
                    }
                }
varNaming   = {"EE":[
                        "recoPhi"                ,
                        "r9"                     ,
                        "sieieFull5x5"           ,
                        "sieipFull5x5"           ,
                        "e2x2Full5x5/e5x5Full5x5",
                        "recoSCEta"              ,
                        "rawE"                   ,
                        "scEtaWidth"             ,
                        "scPhiWidth"             ,
                        "esEn/rawE"              ,
                        "esRR"                   ,
                        "rho"                    ,
                        ],
                    "EB":[
                        "recoPhi"                ,
                        "r9"                     ,
                        "sieieFull5x5"           ,
                        "sieipFull5x5"           ,
                        "e2x2Full5x5/e5x5Full5x5",
                        "recoSCEta"              ,
                        "rawE"                   ,
                        "scEtaWidth"             ,
                        "scPhiWidth"             ,
                        "rho"                    ,
                        ]
                   }
myVarNaming = {"EE":[
                    ["photonOnePhi"],
                    ["photonOneR9"],
                    ["photonOneSieie"],
                    ["photonOneSieip"],
                    ["photonOneE2x2","photonOneE5x5"],
                    ["photonOneEta"],
                    ["photonOneScRawE"],
                    ["photonOneScEtaWidth"],
                    ["photonOneScPhiWidth"],
                    ["photonOnePreShowerE","photonOneScRawE"],
                    ["photonOneSrr"],
                    ["Rho"],
                    ],
            "EB": [["photonOnePhi"],
                    ["photonOneR9"],
                    ["photonOneSieie"],
                    ["photonOneSieip"],
                    ["photonOneE2x2","photonOneE5x5"],
                    ["photonOneEta"],
                    ["photonOneScRawE"],
                    ["photonOneScEtaWidth"],
                    ["photonOneScPhiWidth"],
                    ["photonOnePreShowerE","photonOneScRawE"],
                    ["photonOneSrr"],
                    ["Rho"],
                    ]
             }

ShowerShapeNaming = {"EE":[
                            ["Phi"],
                            ["R9"],
                            ["Sieie"],
                            ["Sieip"],
                            ["E2x2","E5x5"],
                            ["Eta"],
                            ["ScRawE"],
                            ["ScEtaWidth"],
                            ["ScPhiWidth"],
                            ["PreShowerE","ScRawE"],
                            ["Srr"],
                            ["Rho"],
                            ],
                    "EB": [
                            ["Phi"],
                            ["R9"],
                            ["Sieie"],
                            ["Sieip"],
                            ["E2x2","E5x5"],
                            ["Eta"],
                            ["ScRawE"],
                            ["ScEtaWidth"],
                            ["ScPhiWidth"],
                            ["PreShowerE","ScRawE"],
                            ["Srr"],
                            ["Rho"],
                            ],
                     }

for d in data:
    print(d.name)
    print(  "Hard ",np.sum(d.df.genPhotonFHPFS),
            "Prompt ",np.sum(d.df.genPhotonIPFS),
            "R: ",np.sum(d.df.genPhotonIPFS)/len(d.df.genPhotonIPFS),
         )
    print()





inMVA = {}
for ph in phVals:
    inMVA[ph] = {}
    for d in data:
        inMVA[ph][d.name] = {}

        print('---------------',d.name,'--------------')
        for i in np.arange(len(varNaming[ph])):
            if ShowerShapeCorrection:
                VARS = [SS.ShowerShapeCorrection(Var = d.GetWithCuts(myVarNaming[ph][i][j]),  
                                              graph = SS.graph[ph][ShowerShapeNaming[ph][i][j]] ) for j in range(len(myVarNaming[ph][i]))]
            else:
                VARS = [d.GetWithCuts(myVarNaming[ph][i][j]) for j in range(len(myVarNaming[ph][i]))]
            
            if d.name == 'WWTo2L2Nu':
                if varNaming[ph][i] == "recoPhi":
                    print(VARS[0])
            if len(VARS) >1:
                inMVA[ph][d.name][varNaming[ph][i]] = np.array(VARS[0])/np.array(VARS[1])
                M = VARS
            else:
                inMVA[ph][d.name][varNaming[ph][i]] = VARS[0]
            #print(varNaming[i],inMVA[d.name][varNaming[i]][0])


SS.fileNameFormat(phType = ph)

ph = "EE"
for mvaName in SS.mva_to_ntuple[ph]:
    for ntupleName in SS.mva_to_ntuple[ph][mvaName]:
        print(mvaName, ntupleName)
        SS.ShowerShapeCorrection(ph = ph, ssVar = SS.getNameFromNtuple(ntupleName), valueArray =  d.GetWithCuts(ntupleName )
    

SS.graph["EE"].keys()

#path = "/eos/uscms/store/user/corderom/Corrections2016Rereco/"
phVals = ["EE","EB"]
#phVals = ["EE"]
#phVals = ["EB"]

path = ""
file = {}
reader = {}
for ph in phVals:
    if era == "2016":
        preName = "spring16_80x_"+ph
    elif era == "2017":
        preName = "fall17_94X_"+ph
    elif era == "2018":
        preName = "autumn18_"+ph
    file[ph] = pathMVA+preName+"_TMVAnalysis_BDT.weights.xml"
    reader[ph] = TMVA.Reader()






var = {}
for ph in phVals:
    var[ph] = {}
    for i in np.arange(len(varNaming[ph])):
            var[ph][varNaming[ph][i]] = array.array('f',[0])
            reader[ph].AddVariable(varNaming[ph][i], var[ph][varNaming[ph][i]])
    reader[ph].BookMVA("BDT",file[ph])        

varNaming

BDT = {}
for ph in phVals:
    print('============='+ph+"============")
    BDT[ph] = {}
    for d in data:
        print('--------',d.name,'-------',len(inMVA[ph][d.name]["recoPhi"]))
        BDT[ph][d.name] = []
        for i in range(len(inMVA[ph][d.name]["recoPhi"])):
            for v in inMVA[ph][d.name]:
                var[ph][v][0] = inMVA[ph][d.name][v][i]
                
            BDT[ph][d.name].append(reader[ph].EvaluateMVA("BDT"))



if ShowerShapeCorrection:
    ##################################################
    if type(Region) is not list and type(Region) is not np.ndarray:
        labelRegion = Region.replace(" ","")
    else:
        labelRegion = ''
        for r in Region:
            labelRegion += r.replace(" ","")
    ##################################################

    for d in data:
        print("---------"+d.name+"-----------")
        df = pd.DataFrame({name:d.GetWithCuts(name) for name in data[0].df.keys()})

        variable = 'weights'
        df[variable] = d.GetWithCuts(variable)

        df["ShowerShapeMVA_EE"] = BDT['EE'][d.name]
        df["ShowerShapeMVA_EB"] = BDT['EB'][d.name]

        df.to_csv(pathSelections+'/'+d.name+'_'+labelRegion+'.csv')
else:
    print('ShowerShape Corrections are not applied and therefore files not saved')







bins  = np.arange(-1,1.1,step=0.1)

bdt = {}
for phType in ['EB','EE']:
    bdt[phType] = []
    
    Cut.PhaseSpace(
                data,
                phType = '',
                Charge = Charge,
                Region = 'Sig',
                Print  = Print,
                MVA    = MVA,
              ) 
    
    for d,i in zip(data,range(len(data))):
        if not d.df.empty and d.name != 'DoubleMuon_2017':
            d.AddCuts(np.array(d.df.nPU) > 0)
        
        if phType == 'EB':
            Ind = np.abs(d.GetWithCuts('photonOneEta') < 1.4442)
        else:
            Ind = np.logical_and(np.abs(d.GetWithCuts('photonOneEta')) > 1.5666,
                                 np.abs(d.GetWithCuts('photonOneEta')) <= 2.5
                                )

        
        if len(BDT[phType][d.name]) != 0:
            bdtH,x = np.histogram(np.array(BDT[phType][d.name])[Ind],
                                 bins    = bins,
                                 weights = data[i].GetWithCuts('weights')[Ind]
                                )
        else:
            bdtH = np.zeros(len(bins)-1)
        bdt[phType].append(bdtH)

Name = [d.name for d in data]


for log in [True,False]:
    for phType in ['EB','EE']:
        Plotter.Plot_Bin(
                         VAR = bdt[phType], wei=bdt,
                         label = Name, colors = colors,
                         ranges           = [-1,1], 
                         bins             = bins,
                         var              = 'ShowerShapeMVA',
                         part             =  '',
                         signalInclude    = True,
                         stacked          = True,
                         density          = False,
                         log              = log,
                         Plotting         = True,
                         Blind            = True,
                         StatInclude      = False,
                         index            = phType,
                        );

if type(Region) is not list or type(Region) is not np.nbarray:
    labelRegion = Region.replace(" ","")
else:
    labelRegion = ''
    for r in Region:
        labelRegion += r.replace(" ","")

reduced = []
for d in data:
    print('-----'+d.name+'--------')
    reduced.append(pd.read_csv(pathSelections+'/'+d.name+'_'+labelRegion+'.csv'))


from scipy.optimize  import curve_fit, fsolve
from scipy.special   import erf, betainc, gamma

from ROOT import TFile,TMVA,TH2F, TCanvas,TTree
import array, sys
import pandas as pd
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt 

from root_pandas import read_root

# My Dependencies
from Samples.Data      import Data
from Plotter.Helper    import Helper
from Plotter.Plotter   import Plotter
from Cuts.Cuts         import Cuts
